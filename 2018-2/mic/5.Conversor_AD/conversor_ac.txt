; Programa converte valor do potenciometro (analogico -> digital) e printa no LCD



; Bruna Zamith (628093)

; Vinicius Peixoto (628263)



; Range de valores

;0-24:    0 --> 00h-18h --> 00000000b-00011000b

;25-49:   1 --> 19h-31h --> 00011001b-00110001b

;50-74:   2 --> 32h-4Ah --> 00110010b-01001010b

;75-99:   3 --> 4Bh-63h --> 01001011b-01100011b

;100-124: 4 --> 64h-7Ch --> 01100100b-01111100b

;125-149: 5 --> 7Dh-95h --> 01111101b-10010101b

;150-174: 6 --> 96h-AEh --> 10010110b-10101110b

;175-199: 7 --> AFh-C7h --> 10101111b-11000111b

;200-224: 8 --> C8h-E0h --> 11001000b-11100000b

;225-256: 9 --> E1h-FFh --> 11100001b-11111111b 



	org 0h
	
	 mov r6, #00h
	
	 lcall config_lcd		; configuracoes iniciais do LCD

	 lcall config_lcd		; configuracoes iniciais do LCD
	 	 
inicio:	
	 mov r7, #0FFh				; atraso
	 
	 mov r2, P2
	 	 
	 lcall init_adc
	 
	 mov A, r2
	 
	 subb A, r6
	 
	 jz inicio

range_0: mov A, r6	      

	 clr C

	 subb A, #00h

	 jc range_1

         mov A, r6

	 setb C

	 subb A, #18h

	 jnc range_1

eh_0:    mov DPTR, #mensa0
	 
	 lcall comeco_lcd
	 
	 jmp escreve

range_1: mov A, r6	      

	 clr C

	 subb A, #19h

	 jc range_2

         mov A, r6

	 setb C

	 subb A, #31h

	 jnc range_2

eh_1:    mov DPTR, #mensa1

	 lcall comeco_lcd

	 jmp escreve

inicio1: jmp inicio

range_2: mov A, r6	      

	 clr C

	 subb A, #32h

	 jc range_3

         mov A, r6

	 setb C

	 subb A, #4Ah

	 jnc range_3

eh_2:    mov DPTR, #mensa2

	 lcall comeco_lcd

	 jmp escreve

inicio2: jmp inicio1

range_3: mov A, r6	      

	 clr C

	 subb A, #4Bh

	 jc range_4

         mov A, r6

	 setb C

	 subb A, #63h

	 jnc range_4

eh_3:    mov DPTR, #mensa3

	 lcall comeco_lcd

	 jmp escreve

inicio3: jmp inicio2

range_4: mov A, r6	      

	 clr C

	 subb A, #64h

	 jc range_5

         mov A, r6

	 setb C

	 subb A, #7Ch

	 jnc range_5

eh_4:    mov DPTR, #mensa4

	 lcall comeco_lcd

	 jmp escreve

inicio4: jmp inicio3

range_5: mov A, r6	      

	 clr C

	 subb A, #7Dh

	 jc range_6

         mov A, r6

	 setb C

	 subb A, #95h

	 jnc range_6

eh_5:    mov DPTR, #mensa5

	 lcall comeco_lcd

	 jmp escreve

inicio5: jmp inicio4

range_6: mov A, r6	      

	 clr C

	 subb A, #96h

	 jc range_7

         mov A, r6

	 setb C

	 subb A, #0AEh

	 jnc range_7

eh_6:    mov DPTR, #mensa6

	 lcall comeco_lcd

	 jmp escreve

inicio6: jmp inicio5

range_7: mov A, r6	      

	 clr C

	 subb A, #0AFh

	 jc range_8

         mov A, r6

	 setb C

	 subb A, #0C7h

	 jnc range_8

eh_7:    mov DPTR, #mensa7

	 lcall comeco_lcd

	 jmp escreve

inicio7: jmp inicio6

range_8: mov A, r6	      

	 clr C

	 subb A, #0C8h

	 jc range_9

         mov A, r6

	 setb C

	 subb A, #0E0h

	 jnc range_9

eh_8:    mov DPTR, #mensa8

	 lcall comeco_lcd

	 jmp escreve

inicio8: jmp inicio7

range_9: mov A, r6	      

	 clr C

	 subb A, #0E1h

	 jc erro

         mov A, r6

	 setb C

	 subb A, #0FFh

	 jnc erro

eh_9:    mov DPTR, #mensa9

	 lcall comeco_lcd

	 jmp escreve

inicio9: jmp inicio8

erro:    ; nao pertence a nenhum dos ranges

	 jmp inicio


comeco_lcd:
	 
	 mov p1, #01h
	 
	 lcall habi_inst
	 
	 ret
	 
escreve: 
	 inc r7

	 mov A, r7

	 movc A, @A+DPTR

	 mov p1, A

	 lcall habi_dado

	 cjne A, #0FEh, escreve
	 

aguarda:
	mov A, p3

	subb A, r6

	jz aguarda

	jmp inicio9

config_lcd:

	mov p1, #38h

	lcall habi_inst

	mov p1, #38h

	lcall habi_inst

	mov p1, #06h

	lcall habi_inst

	mov p1, #0Fh

	lcall habi_inst

	mov p1, #01h

	lcall habi_inst

	ret

habi_inst:

	mov p0, #01h

	mov p0, #00h

	lcall atraso

	ret

habi_dado:

	mov p0, #03h

	mov p0, #02h

	lcall atraso
	
	ret

atraso:

	mov r1, #14h

volta:  mov r0, #0FAh

	djnz r0, $

	djnz r1, volta

	ret

init_adc:
	 clr P3.7 ;oe = 0
	 clr P3.6 ;start = ale = 1
	 setb P3.6 ;start = ale = 0
	 clr P3.6 ;start = ale = 1
wait:	 jb p3.2 , wait
	 setb P3.7 ;oe = 1
	 mov r6, P2
	 ret
	 
	
mensa0: db '0', 0FEh

mensa1: db '1', 0FEh

mensa2: db '2', 0FEh

mensa3: db '3', 0FEh

mensa4: db '4', 0FEh

mensa5: db '5', 0FEh

mensa6: db '6', 0FEh

mensa7: db '7', 0FEh

mensa8: db '8', 0FEh

mensa9: db '9', 0FEh



END
